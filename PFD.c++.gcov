        -:    0:Source:PFD.c++
        -:    0:Graph:PFD.gcno
        -:    0:Data:PFD.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:
        -:    2:// --------
        -:    3:// includes
        -:    4:// --------
        -:    5:
        -:    6:#include <cassert>    // assert
        -:    7:#include <functional> // greater
        -:    8:#include <iostream>   // endl, istream, ostream
        -:    9:#include <queue>      // priority_queue
        -:   10:#include <sstream>    // istringstream
        -:   11:#include <string>     // getline, string
        -:   12:#include <utility>    // make_pair, pair
        -:   13:#include <vector>     // vector
        -:   14:
        -:   15:#include "PFD.h"
        -:   16:
        -:   17:using namespace std;
        -:   18://This array is 0 indexed while the input is 1-indexed. to access (2, 1) call adj[1][0]
        -:   19:int adj[100][100];
        -:   20://vector<vector<int> > adj(100, vector <int> (0));
        2:   21:priority_queue<int, vector<int>, greater<int> > pq;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 never executed
call    7 never executed
        2:   22:priority_queue<int, vector<int>, greater<int> > succ;
call    0 returned 100%
call    1 returned 100%
branch  2 taken 100% (fallthrough)
branch  3 taken 0% (throw)
call    4 returned 100%
call    5 returned 100%
call    6 never executed
        -:   23:int used [100];
        -:   24:
        -:   25:// ------------
        -:   26:// PFD_read_first
        -:   27:// ------------
        -:   28:
function _Z14PFD_read_firstRKSs called 16 returned 100% blocks executed 80%
       16:   29:pair<int, int> PFD_read_first (const string& s){
       16:   30:    istringstream sin(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   31:    int t;
        -:   32:    int r;
       16:   33:    sin >> t >> r;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
       16:   34:    return make_pair(t, r);
call    0 returned 100%
call    1 returned 100%
call    2 never executed
        -:   35:}
        -:   36:
        -:   37:// ------------
        -:   38:// populate_adj
        -:   39:// ------------
        -:   40:
function _Z12populate_adjRSoRKSsi called 26 returned 100% blocks executed 83%
       26:   41:void populate_adj (ostream& w, const string& s, int t) {
       26:   42:    istringstream sin(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   43:    int v;
        -:   44:    int task;
        -:   45:    int num;
       26:   46:    sin >> task >> num;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
branch  4 taken 100% (fallthrough)
branch  5 taken 0% (throw)
        -:   47:    //cout << task << " " << num << endl;
       62:   48:    for (int i = 0; i < num; ++i)
branch  0 taken 58%
branch  1 taken 42% (fallthrough)
        -:   49:    {
        -:   50:        /* code */
       36:   51:        sin >> v;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       36:   52:        adj[task-1][v-1] = 1;
        -:   53:        //cout << task << " = " << v << endl;
       26:   54:    }
call    0 returned 100%
call    1 never executed
        -:   55:    //print_adj(cout, t);
       26:   56:}
        -:   57:
        -:   58:// ------------
        -:   59:// PFD_eval
        -:   60:// ------------
        -:   61:
function _Z8PFD_evalRSoi called 8 returned 100% blocks executed 100%
        8:   62:void PFD_eval (ostream& w, int t) {
        -:   63:    // <your code>
        -:   64:    //int popped = 0;
        8:   65:    full_scan(t);
call    0 returned 100%
        -:   66:    //Change parameter
        -:   67:    //while (popped < t){
        -:   68:        //cout << param << " param" << endl;
        -:   69:        //print_adj(cout, t);
        -:   70:        //assert(succ.empty());
        8:   71:        pop_pq(w, t);
call    0 returned 100%
        -:   72:    //}
        -:   73:
        -:   74:    //if (popped != t)
        -:   75:            //cout << "popped only" << popped << endl;
        -:   76:        //cout << "final matrix" << endl;
        -:   77:        //print_adj(cout, t);
        8:   78:    w << endl;
call    0 returned 100%
        8:   79:}
        -:   80:// ---------
        -:   81:// scan_succ
        -:   82:// ---------
function _Z9scan_succi called 28 returned 100% blocks executed 100%
       28:   83:void scan_succ(int t){
       28:   84:    int current = 0;
       76:   85:    while (!succ.empty()){
call    0 returned 100%
branch  1 taken 42%
branch  2 taken 58% (fallthrough)
       20:   86:        current = succ.top();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       20:   87:        int v = row_scan(current, t);
call    0 returned 100%
        -:   88:        //cout << "row_scan = " << v << " with row " << current << endl;
       20:   89:        if (v == 0){
branch  0 taken 70% (fallthrough)
branch  1 taken 30%
        -:   90:            //cout << "scan_succ pushed " << current << " to pq" << endl;
       14:   91:            pq.push(current);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       14:   92:            used[current-1] = 1;
        -:   93:        }  
       20:   94:        succ.pop();
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:   95:    }
       28:   96:}
        -:   97:
        -:   98:// ---------
        -:   99:// pop_pq
        -:  100:// ---------
function _Z6pop_pqRSoi called 8 returned 100% blocks executed 100%
        8:  101:void pop_pq (ostream& w, int t){
       44:  102:    while (!pq.empty()){
call    0 returned 100%
branch  1 taken 78%
branch  2 taken 22% (fallthrough)
        -:  103:
       28:  104:        w << pq.top() << " ";
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
       28:  105:        update_succ(t, pq.top());
call    0 returned 100%
call    1 returned 100%
       28:  106:        pq.pop();
call    0 returned 100%
       28:  107:        scan_succ(t);
call    0 returned 100%
        -:  108:    }
        8:  109:}
        -:  110:// -------
        -:  111:// update_succ
        -:  112:// -------
function _Z11update_succii called 28 returned 100% blocks executed 100%
       28:  113:void update_succ (int t, int r){
      144:  114:    for (int i = 0; i < t; ++i)
branch  0 taken 81%
branch  1 taken 19% (fallthrough)
        -:  115:    {
      116:  116:        if (adj[i][r-1]==1){
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  117:            //cout << "update_succ pushed " << i+1 << " to succ" << endl;
       20:  118:            succ.push(i+1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       20:  119:            adj[i][r-1] = 0;
        -:  120:        }
        -:  121:    }
        -:  122:    //scan_succ(t);
       28:  123:}
        -:  124:
        -:  125:// --------
        -:  126:// row_scan
        -:  127:// --------
function _Z8row_scanii called 20 returned 100% blocks executed 100%
       20:  128:int row_scan (int r, int t){
      102:  129:    for (int i = 0; i < t; ++i)
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -:  130:    {
       88:  131:        if (adj[r-1][i]==1)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        6:  132:            return 1;
        -:  133:    }
       14:  134:    return 0;
        -:  135:}
        -:  136:// // --------
        -:  137:// // col_scan
        -:  138:// // --------
        -:  139:// int col_scan (int c, int t){
        -:  140://     for (int i = 0; i < t; ++i)
        -:  141://     {
        -:  142://         if (adj[i][c-1]==1)
        -:  143://             return 1;
        -:  144://     }
        -:  145://     return 0;
        -:  146:// }
        -:  147:// ----------
        -:  148:// full_scan
        -:  149:// ----------
function _Z9full_scani called 8 returned 100% blocks executed 100%
        8:  150:void full_scan (int t){
        8:  151:    int write = 0;
        -:  152:    //print_adj(cout, t);
       36:  153:    for (int i = 0; i < t; ++i)
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
        -:  154:    {
      144:  155:        for (int j = 0; j < t; ++j)
branch  0 taken 81%
branch  1 taken 19% (fallthrough)
        -:  156:        {
      116:  157:            if (adj[i][j]==1){
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
       20:  158:                write = 1;
        -:  159:            }
        -:  160:        }
        -:  161:        
       28:  162:        if (write == 0){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  163:            //cout << "full_scan pushed " << i+1 << endl; 
       14:  164:            pq.push(i+1);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       14:  165:            used[i+1] = 1;
        -:  166:        }
       28:  167:        write = 0;
        -:  168:        
        -:  169:    }
        8:  170:    return;
        -:  171:}
        -:  172:
        -:  173:// -------------
        -:  174:// print_pq
        -:  175:// -------------
function _Z8print_pqRSo called 0 returned 0% blocks executed 0%
    #####:  176:void print_pq(ostream& w) {
    #####:  177:    int p = pq.size();
call    0 never executed
    #####:  178:    for (int i = 0; i < p; ++i)
branch  0 never executed
branch  1 never executed
        -:  179:    {
    #####:  180:        w << pq.top() << " ";
call    0 never executed
call    1 never executed
call    2 never executed
    #####:  181:        pq.pop();
call    0 never executed
        -:  182:    }
    #####:  183:    w << endl;
call    0 never executed
    #####:  184:}
        -:  185:
        -:  186:// -------------
        -:  187:// print_adj
        -:  188:// -------------
function _Z9print_adjRSoi called 4 returned 100% blocks executed 100%
        4:  189:void print_adj (ostream& w, int t) {
       24:  190:    for (int i = 0; i < t; ++i){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      120:  191:        for (int j = 0; j < t; ++j)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  192:        {
        -:  193:            /* code */
      100:  194:            w << adj[i][j] << " ";
call    0 returned 100%
call    1 returned 100%
        -:  195:        }
       20:  196:        w << endl;
call    0 returned 100%
        -:  197:    }
        -:  198:
        4:  199:}
        -:  200:// -------------
        -:  201:// clear_adj
        -:  202:// -------------
function _Z9clear_adji called 12 returned 100% blocks executed 100%
       12:  203:void clear_adj (int t) {
       68:  204:    for (int i = 0; i < t; ++i){
branch  0 taken 82%
branch  1 taken 18% (fallthrough)
      320:  205:        for (int j = 0; j < t; ++j)
branch  0 taken 83%
branch  1 taken 18% (fallthrough)
        -:  206:        {
        -:  207:            /* code */
      264:  208:            adj[i][j] = 0;
        -:  209:        }
        -:  210:    }
        -:  211:
       12:  212:}
        -:  213:// -------------
        -:  214:// PFD_print
        -:  215:// -------------
        -:  216:
function _Z9PFD_printRSoi called 8 returned 100% blocks executed 100%
        8:  217:void PFD_print (ostream& w, int i) {
        8:  218:    w << i << " " << endl;}
call    0 returned 100%
call    1 returned 100%
call    2 returned 100%
        -:  219:
        -:  220:// -------------
        -:  221:// PFD_solve
        -:  222:// -------------
        -:  223:
function _Z9PFD_solveRSiRSo called 8 returned 100% blocks executed 86%
        8:  224:void PFD_solve (istream& r, ostream& w) {
        8:  225:    string s;
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        8:  226:    int tasks = 0;
        8:  227:    int rules = 0;
        8:  228:    getline(r,s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        8:  229:    const pair <int, int> p = PFD_read_first(s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        8:  230:    tasks = p.first;
        8:  231:    rules = p.second;
        -:  232:    //print_adj(w, tasks);
       24:  233:    for (int i = 0; i < rules; ++i)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  234:    {
       16:  235:        getline(r,s);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
       16:  236:        populate_adj(w, s, tasks);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
        -:  237:    }
        8:  238:    PFD_eval(w, tasks);
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0% (throw)
call    3 returned 100%
call    4 never executed
        -:  239:    //w << 1;
        -:  240:    //print_adj(w, tasks);
function _GLOBAL__sub_I_adj called 2 returned 100% blocks executed 100%
function _Z41__static_initialization_and_destruction_0ii called 2 returned 100% blocks executed 74%
       14:  241:}
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
branch  3 taken 100% (fallthrough)
branch  4 taken 0%
